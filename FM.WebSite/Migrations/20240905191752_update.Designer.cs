// <auto-generated />
using System;
using FM.WebSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FM.WebSite.Migrations
{
    [DbContext(typeof(ManagementContext))]
    [Migration("20240905191752_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FM.WebSite.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FM.WebSite.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FM.WebSite.Models.Fridge", b =>
                {
                    b.Property<int>("FridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FridgeId"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("FridgeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FridgeType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("FridgeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Fridge");
                });

            modelBuilder.Entity("FM.WebSite.Models.FridgeAllocation", b =>
                {
                    b.Property<int>("FridgeAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FridgeAllocationId"));

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintananceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FridgeAllocationId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("FridgeId")
                        .IsUnique();

                    b.ToTable("FridgeAllocation");
                });

            modelBuilder.Entity("FM.WebSite.Models.Maintenance.Fault", b =>
                {
                    b.Property<int>("FaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaultId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FridgesFridgeId")
                        .HasColumnType("int");

                    b.HasKey("FaultId");

                    b.HasIndex("FridgesFridgeId");

                    b.ToTable("Fault");
                });

            modelBuilder.Entity("FM.WebSite.Models.Maintenance.Visit", b =>
                {
                    b.Property<int>("VisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitID"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FrideId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("VisitDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("VisitTime")
                        .HasColumnType("time");

                    b.HasKey("VisitID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("FrideId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("FM.WebSite.Models.PurchaseRequest", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("FridgeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseRequest");
                });

            modelBuilder.Entity("FM.WebSite.Models.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecordId");

                    b.HasIndex("FridgeId");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("FM.WebSite.Models.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepairDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("RepairDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepairStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RepairId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FridgeId");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("FM.WebSite.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FridgeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("FM.WebSite.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("userId");

                    b.HasIndex("CustomerId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FM.WebSite.Models.Employee", b =>
                {
                    b.HasOne("FM.WebSite.Models.User", "User")
                        .WithOne("Employees")
                        .HasForeignKey("FM.WebSite.Models.Employee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FM.WebSite.Models.Fridge", b =>
                {
                    b.HasOne("FM.WebSite.Models.Supplier", "Supplier")
                        .WithMany("Fridges")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FM.WebSite.Models.FridgeAllocation", b =>
                {
                    b.HasOne("FM.WebSite.Models.Customer", "Customer")
                        .WithOne("Allocation")
                        .HasForeignKey("FM.WebSite.Models.FridgeAllocation", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.WebSite.Models.Fridge", "Fridge")
                        .WithOne("Allocation")
                        .HasForeignKey("FM.WebSite.Models.FridgeAllocation", "FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FM.WebSite.Models.Maintenance.Fault", b =>
                {
                    b.HasOne("FM.WebSite.Models.Fridge", "Fridges")
                        .WithMany("Faults")
                        .HasForeignKey("FridgesFridgeId");

                    b.Navigation("Fridges");
                });

            modelBuilder.Entity("FM.WebSite.Models.Maintenance.Visit", b =>
                {
                    b.HasOne("FM.WebSite.Models.Customer", "Customer")
                        .WithMany("Visits")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.WebSite.Models.Employee", "Employee")
                        .WithOne("Visit")
                        .HasForeignKey("FM.WebSite.Models.Maintenance.Visit", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.WebSite.Models.Fridge", "Fridge")
                        .WithMany("Visits")
                        .HasForeignKey("FrideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FM.WebSite.Models.PurchaseRequest", b =>
                {
                    b.HasOne("FM.WebSite.Models.Fridge", "Fridge")
                        .WithMany("Purchases")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.WebSite.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FM.WebSite.Models.Record", b =>
                {
                    b.HasOne("FM.WebSite.Models.Fridge", "Fridge")
                        .WithMany("Records")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FM.WebSite.Models.Repair", b =>
                {
                    b.HasOne("FM.WebSite.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FM.WebSite.Models.Fridge", "Fridge")
                        .WithMany("Repairs")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("FM.WebSite.Models.User", b =>
                {
                    b.HasOne("FM.WebSite.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FM.WebSite.Models.Customer", b =>
                {
                    b.Navigation("Allocation");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("FM.WebSite.Models.Employee", b =>
                {
                    b.Navigation("Visit");
                });

            modelBuilder.Entity("FM.WebSite.Models.Fridge", b =>
                {
                    b.Navigation("Allocation");

                    b.Navigation("Faults");

                    b.Navigation("Purchases");

                    b.Navigation("Records");

                    b.Navigation("Repairs");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("FM.WebSite.Models.Supplier", b =>
                {
                    b.Navigation("Fridges");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("FM.WebSite.Models.User", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
